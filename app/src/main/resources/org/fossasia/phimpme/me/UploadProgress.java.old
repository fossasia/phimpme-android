package vn.mbm.phimp.me;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URLEncoder;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import oauth.signpost.OAuthConsumer;
import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
import oauth.signpost.http.HttpParameters;
import oauth.signpost.signature.HmacSha1MessageSigner;
import oauth.signpost.signature.OAuthMessageSigner;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpVersion;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import vn.mbm.phimp.me.database.DrupalItem;
import vn.mbm.phimp.me.database.FacebookItem;
import vn.mbm.phimp.me.database.FlickrItem;
import vn.mbm.phimp.me.database.PicasaItem;
import vn.mbm.phimp.me.database.TumblrItem;
import vn.mbm.phimp.me.database.TwitterItem;
import vn.mbm.phimp.me.services.DrupalServices;
import vn.mbm.phimp.me.services.FacebookServices;
import vn.mbm.phimp.me.services.FlickrServices;
import vn.mbm.phimp.me.services.PicasaServices;
import vn.mbm.phimp.me.services.TumblrServices;
import vn.mbm.phimp.me.services.TwitterServices;
import vn.mbm.phimp.me.utils.Commons;
import vn.mbm.phimp.me.utils.Commons.MySSLSocketFactory;
import vn.mbm.phimp.me.utils.CustomFilePartEntity;
import vn.mbm.phimp.me.utils.CustomMultiPartEntity;
import vn.mbm.phimp.me.utils.CustomMultiPartEntity.ProgressListener;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

public class UploadProgress extends Activity 
{
	Context ctx;

	LinearLayout lytUploadProgress;
	
	static String title;
	static String description;
	static String filepath;
	static String latitude;
	static String longitude;
	static String tags;
	static String[] account_id;
	static String[] account_name;
	static String[] account_service;
	
	static ArrayList<Integer> checked_ids = new ArrayList<Integer>();
	static ArrayList<ProgressBar> progressbar_array = new ArrayList<ProgressBar>();
	static Map<Integer, ViewHolder> viewholders = new TreeMap<Integer, ViewHolder>();
	
	static final String default_tag_separate = ",";
	
	@Override
    public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
        setContentView(R.layout.upload_progress);

        lytUploadProgress = (LinearLayout) findViewById(R.id.linearUploadProgress);
        checked_ids.clear();
        lytUploadProgress.removeAllViews();
        
        ctx = this;
        
        try
        {
        	Bundle data = getIntent().getExtras();
        	
        	title = data.getString("title");
        	description = data.getString("description");
        	filepath = data.getString("filepath");
        	latitude = data.getString("latitude");
        	longitude = data.getString("longitude");
        	tags = data.getString("tags");
        	account_id = data.getStringArray("id");
        	account_service = data.getStringArray("service");
        	account_name = data.getStringArray("name");
        	
        	Log.d("thong", "Checked accounts: " + PhimpMe.checked_accounts.size());
        	
        	for (int i = 0; i < PhimpMe.checked_accounts.size(); i++)
        	{
        		boolean _b = PhimpMe.checked_accounts.get(account_id[i]);
        		
        		if (_b)
        		{
        			checked_ids.add(i);
        		}
        	}
        	
        	Log.d("thong", "checked_ids: " + checked_ids.size());
        	
        	for (int i = 0; i < checked_ids.size();i++)
        	{
        		ViewHolder holder;
    			
    			View view = new View(ctx);
    			
    			final int position = checked_ids.get(i);
    			
    			LayoutInflater inflater = ((Activity) ctx).getLayoutInflater();
				view = inflater.inflate(R.layout.upload_progress_item, null, true);
				holder = new ViewHolder();
				
				holder.imgIcon = (ImageView) view.findViewById(R.id.imgUploadProgressItemServiceIcon);
				holder.txtName = (TextView) view.findViewById(R.id.tvUploadProgressItemName);
				holder.imgStatusOK = (ImageView) view.findViewById(R.id.imgUploadProgressItemStatusOK);
				holder.imgStatusFail = (ImageView) view.findViewById(R.id.imgUploadProgressItemStatusFail);
				holder.pgbar = (ProgressBar) view.findViewById(R.id.prgbarUploadProgressItemProgressBar);
				holder.txtProcess = (TextView) view.findViewById(R.id.tvUploadProgressItemProcess);
				
				viewholders.put(position, holder);
				
				if (account_service[position].equals("tumblr"))
				{
					holder.imgIcon.setImageResource(TumblrServices.icon);
				}
				else if (account_service[position].equals("facebook"))
				{
					holder.imgIcon.setImageResource(FacebookServices.icon);
				}
				else if (account_service[position].equals("flickr"))
				{
					holder.imgIcon.setImageResource(FlickrServices.icon);
				}
				else if (account_service[position].equals("picasa"))
				{
					holder.imgIcon.setImageResource(PicasaServices.icon);
				}
				else if (account_service[position].equals("twitter"))
				{
					holder.imgIcon.setImageResource(TwitterServices.icon);
				}
				else if (account_service[position].equals("drupal"))
				{
					holder.imgIcon.setImageResource(DrupalServices.icon);
				}
				
				String acc_name = account_name[position];
				
				holder.txtName.setText(acc_name);
				
				lytUploadProgress.addView(view);
				
				new UploadProgressAsyncTask().execute(position);
        	}
        }
        catch (Exception e) 
        {
        	e.printStackTrace();
        	setResult(RESULT_CANCELED);
			finish();
		}
	}
	
	@Override
	public void onBackPressed()
	{
		try
		{
			PhimpMe.checked_accounts.clear();
			checked_ids.clear();
			lytUploadProgress.removeAllViews();
			finish();
		}
		catch (Exception e) 
		{
			// TODO: handle exception
		}
	}
	
	class ViewHolder
	{
		public ImageView imgIcon;
		public TextView txtName;
		public ImageView imgStatusOK;
		public ImageView imgStatusFail;
		public ProgressBar pgbar;
		public TextView txtProcess;
	}
	
	private class UploadProgressAsyncTask extends AsyncTask<Integer, Integer, Boolean>
	{
		private int pos;
		private ProgressBar pb;
		private ViewHolder vh;
		private ImageView ivOK;
		private ImageView ivFail;
		private TextView tvPC;
		long totalSize;
		
		@Override
		protected Boolean doInBackground(Integer... params) 
		{
			Boolean result = false;
			
			pos = params[0];
			vh = viewholders.get(pos);
			pb = vh.pgbar;
			ivOK = vh.imgStatusOK;
			ivFail = vh.imgStatusFail;
			tvPC = vh.txtProcess;
			
			String _s = account_service[pos].toLowerCase();
			
			if (DrupalServices.title.toLowerCase().equals(_s))
			{
				DrupalItem acc = DrupalItem.getItem(ctx, account_id[pos]);
				String username = acc.getUsername();
				String password = acc.getPassword();
				String service_url = acc.getSerivceURL();
				
				File f = new File(filepath);
				
				HttpClient client = null;
				HttpPost post = null;
				ResponseHandler<String> res = new BasicResponseHandler();
				String session_id = "";
				String session_name = "";
				String file_id = "";
				String url;
				
				/*
				 * Thong - Login first
				 */
				try
				{
					url = service_url + "user/login";
					
					client = new DefaultHttpClient();
					
					post = new HttpPost(url);
					
					MultipartEntity multi = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
					
					multi.addPart("username", new StringBody(username));
					multi.addPart("password", new StringBody(password));
					
					post.setEntity(multi);
					
					String httpResponse = client.execute(post, res);
					
					Log.d("drupal", "Login step: ");
					Log.v("drupal", httpResponse);
					
					JSONObject json = new JSONObject(httpResponse);
					
					session_id = json.getString("sessid");
					session_name = json.getString("session_name");
				}
				catch (Exception e) 
				{
					//Log.e(TAG, "Error: " + e.toString());
					
					e.printStackTrace();
					
					return false;
				}
				
				/*
				 * Thong - Upload file
				 */
				try
				{
					url = service_url + "file";
					
					client = new DefaultHttpClient();
					
					post = new HttpPost(url);
					
					//Authorize
					post.setHeader("Cookie", session_name + "=" + session_id);
					
					//Get imagedata
					Bitmap bm = BitmapFactory.decodeFile(f.getAbsolutePath());
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);
					byte[] b = baos.toByteArray();
					baos.flush();
					baos.close();
					baos = null;
					String img_data_b64 = Base64.encodeToString(b, Base64.DEFAULT);
					
					CustomMultiPartEntity multi = new CustomMultiPartEntity(new ProgressListener() 
					{
						@Override
						public void transferred(long num) 
						{
							publishProgress((int) ((num / (float) totalSize) * 100));
						}
					});
					
					multi.addPart("file", new StringBody(img_data_b64));
					multi.addPart("filename", new StringBody(f.getName()));
					totalSize = multi.getContentLength();

					post.setEntity(multi);
					
					String httpResponse = client.execute(post, res);
					
					Log.d("drupal", "Upload file step: ");
					Log.v("drupal", httpResponse);
					
					img_data_b64 = "";
					
					JSONObject json = new JSONObject(httpResponse);
					
					file_id = json.getString("fid");
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					return false;
				}
				
				String[] list = null;
				/* Quan - Retrieve the nodes owned by user */
				try
				{
					url = service_url + "own_nodes.json";
					HttpGet get = new HttpGet(url);
					
	                //Authorize
	                get.setHeader("Cookie", session_name + "=" + session_id);
	                
	                String textresponse = client.execute(get, res);
	                JSONArray jsonResult = new JSONArray(textresponse);
	                int n = jsonResult.length();
	                list = new String[n];
	                for (int i = 0; i < n; i++)
	                {
	                	list[i] = jsonResult.getJSONObject(i).getString("nid");
	                }
	                Log.d("thong", "Nodes owned by user: " + StringUtils.join(list, ", "));
				}
				catch (HttpResponseException e)
				{
					Log.e("function", "getOwnNodes: " + e.toString());
					e.printStackTrace();
					return false;
				}
				catch (ClientProtocolException e)
				{
					Log.e("function", "getOwnNodes: " + e.toString());
					e.printStackTrace();
					return false;
				} catch (IOException e) {
					Log.e("function", "getOwnNodes: " + e.toString());
					e.printStackTrace();
					return false;
				} catch (JSONException e) {
					Log.e("function", "getOwnNodes: " + e.toString());
					e.printStackTrace();
					return false;
				}
				
				int total = 0;				
				try
				{
					url = service_url + "node/" + list[0] + ".json";
					HttpGet get = new HttpGet(url);
					
	                //Authorize
	                get.setHeader("Cookie", session_name + "=" + session_id);
	                
	                String textresponse = client.execute(get, res);
	                JSONObject jsonResult = new JSONObject(textresponse);
	                JSONArray medias = jsonResult.getJSONObject("media_gallery_media").getJSONArray("und");
	                total = medias.length();
	                Log.d("thong", "total photo: " + total);
	              }
				catch (Exception e)
				{
					e.printStackTrace();
					return false;
				}
				
				/*
				 * Quan - Update node - attach the file to node.
				 */
				try
				{
					url = service_url + "node/" + list[0];
					Log.d("thong", "Update node: url = " + url);
					int newIndex = total;
					String fileId = file_id;
					HttpPut put = new HttpPut(url);

					//Authorize
					put.setHeader("Cookie", session_name + "=" + session_id);
					// Add your data
					String param = "media_gallery_media[und][" + Integer.toString(newIndex) + "][fid]";
				    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
				    nameValuePairs.add(new BasicNameValuePair(param, fileId));
				    nameValuePairs.add(new BasicNameValuePair("type", "media_gallery"));
				    //nameValuePairs.add(new BasicNameValuePair("field_position[und][0][latitude]", latitude));
				    //nameValuePairs.add(new BasicNameValuePair("field_position[und][0][longitude]", longitude));
				    put.setEntity(new UrlEncodedFormEntity(nameValuePairs));					
					
					Log.d("thong", param + fileId);

					String httpResponse = client.execute(put, res);

					Log.d("drupal", "Update node: ");
					Log.v("drupal", httpResponse);
				}
				catch (Exception e)
				{
					Log.e("drupal", "Update node");
					e.printStackTrace();
					return false;
				}
				
				/*
				 * Thong - Create node
				try
				{
					url = service_url + "node";
					
					client = new DefaultHttpClient();
					
					post = new HttpPost(url);
					
					//Authorize
					post.setHeader("Cookie", session_name + "=" + session_id);
					
					MultipartEntity multi = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
					
					multi.addPart("title", new StringBody(title));
					multi.addPart("body", new StringBody(description));
					multi.addPart("type", new StringBody("media_gallery"));
					multi.addPart("language", new StringBody(""));
					
					multi.addPart("media_gallery_media[und][0][fid]", new StringBody(file_id));
					multi.addPart("field_position[und][0][latitude]", new StringBody(latitude));
					multi.addPart("field_position[und][0][longitude]", new StringBody(longitude));

					post.setEntity(multi);
					
					String httpResponse = client.execute(post, res);
					
					Log.d("drupal", "Create node step: ");
					Log.v("drupal", httpResponse);
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					return false;
				}
				 */
				
				/*
				 * Thong - Logout
				 */
				try
				{
					url = service_url + "user/logout";
					
					client = new DefaultHttpClient();
					
					post = new HttpPost(url);
					
					//Authorize
					post.setHeader("Cookie", session_name + "=" + session_id);
					
					String httpResponse = client.execute(post, res);
					Log.d("drupal", "Log out step: ");
					Log.v("drupal", httpResponse);
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					return false;
				}
				
				result = true;
			}
			else if (TwitterServices.title.toLowerCase().equals(_s))
			{
				TwitterItem acc = TwitterItem.getItem(ctx, account_id[pos]);
				String token = acc.getToken();
				String token_secret = acc.getTokenSecret();
				
				try
				{
					String url = "https://upload.twitter.com/1/statuses/update_with_media.json";
					
					URI uri = new URI(url);
					
					HttpClient httpclient = new DefaultHttpClient();
					
					HttpPost httppost = new HttpPost(uri);
					
					CustomMultiPartEntity multi = new CustomMultiPartEntity(new ProgressListener() 
					{
						@Override
						public void transferred(long num) 
						{
							publishProgress((int) ((num / (float) totalSize) * 100));
						}
					});
					
					multi.addPart("media[]", new FileBody(new File(filepath)));
					multi.addPart("status", new StringBody(title));
					multi.addPart("lat", new StringBody(latitude));
					multi.addPart("long", new StringBody(longitude));
					totalSize = multi.getContentLength();
					
					httppost.setEntity(multi);
					
					OAuthConsumer consumer = new CommonsHttpOAuthConsumer(TwitterServices.CONSUMER_KEY, TwitterServices.CONSUMER_SECRET);
					
					consumer.setTokenWithSecret(token, token_secret);

					consumer.sign(httppost);
									
					ResponseHandler<String> res = new BasicResponseHandler();
					
					String httpResponse = httpclient.execute(httppost, res);
					
					JSONObject json = new JSONObject(httpResponse);
					
					if (json.getString("id_str") != null)
					{
						result = true;
					}
					else
					{
						result = false;
					}
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					return false;
				}
			}
			else if (FacebookServices.title.toLowerCase().equals(_s))
			{
				try
				{
					FacebookItem acc = FacebookItem.getItem(ctx, account_id[pos]);
					String access_token = acc.getAccessToken();
					
					String url = "https://graph.facebook.com/me/photos";
					
					url += "?access_token=" + access_token;
					
					Log.i("facebook", "Upload Photo URL: " + url);
					
					URI uri = new URI(url);
					
					HttpClient httpClient = null;
					
			    	try 
				    {
			    		KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
				        trustStore.load(null, null);
				
				        SSLSocketFactory sf = new MySSLSocketFactory(trustStore);
				        sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
				
				        HttpParams _params = new BasicHttpParams();
				        HttpProtocolParams.setVersion(_params, HttpVersion.HTTP_1_1);
				        HttpProtocolParams.setContentCharset(_params, HTTP.UTF_8);
				
				        SchemeRegistry registry = new SchemeRegistry();
				        registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
				        registry.register(new Scheme("https", sf, 443));
				
				        ClientConnectionManager ccm = new ThreadSafeClientConnManager(_params, registry);
				
				        httpClient = new DefaultHttpClient(ccm, _params);
				        
				        trustStore = null; //Clean up memory
				        sf = null; //Clean up memory
				        _params = null; //Clean up memory
				        registry = null; //Clean up memory
				        ccm = null; //Clean up memory
				    } 
				    catch (Exception e) 
				    {
				       	httpClient = new DefaultHttpClient();
				    }
					
					HttpPost httppost = new HttpPost(uri);
					
					CustomMultiPartEntity multi = new CustomMultiPartEntity(new ProgressListener() 
					{
						@Override
						public void transferred(long num) 
						{
							publishProgress((int) ((num / (float) totalSize) * 100));
						}
					});
					
					multi.addPart("source", new FileBody(new File(filepath)));
					multi.addPart("name", new StringBody(title));
					
					totalSize = multi.getContentLength();
					
					httppost.setEntity(multi);
									
					ResponseHandler<String> res = new BasicResponseHandler();
					
					String httpResponse = httpClient.execute(httppost, res);
					
					Log.i("facebook", "Response from Upload: " + httpResponse);
					
					JSONObject json = new JSONObject(httpResponse);
					
					if (json.getString("id") != null)
					{
						result = true;
					}
					else
					{
						result = false;
					}
				}
				catch (Exception e) 
				{
					Log.e("facebook", e.toString());
					
					e.printStackTrace();
					
					return false;
				}
			}
			else if (FlickrServices.title.toLowerCase().equals(_s))
			{
				try
				{
					FlickrItem acc = FlickrItem.getItem(ctx, account_id[pos]);
					String token = acc.getToken();
					String token_secret = acc.getTokenSecret();
					
					String url = "http://api.flickr.com/services/upload/";
	
					url += "?title=" + URLEncoder.encode(title);
					
					String tag_str = "";
					
					if (!tags.equals(""))
					{
						String[] tags_arr = tags.split(default_tag_separate);
						for (int i = 0; i < tags_arr.length; i++)
						{
							String tag = tags_arr[i];
							if (tag.contains(" ")) tag = "\"" + tag + "\"";
							tags_arr[i] = tag;
						}
						tag_str = TextUtils.join(FlickrServices.tag_separate, tags_arr);
					}
					
					if (!tag_str.equals(""))
					{
						url += "&tags=" + URLEncoder.encode(tag_str);
					}
					
					URI uri = new URI(url);
					
					Log.d("flickr", "URL: " + url);
					
					HttpClient httpclient = new DefaultHttpClient();
					
					HttpPost httppost = new HttpPost(uri);
					
					OAuthConsumer consumer = new CommonsHttpOAuthConsumer(FlickrServices.CONSUMER_KEY, FlickrServices.CONSUMER_SECRET);
					
					HttpParameters hp = new HttpParameters();
					hp.put("title", title);
					
					consumer.setAdditionalParameters(hp);
					
					OAuthMessageSigner oms = new HmacSha1MessageSigner();
					
					consumer.setMessageSigner(oms);
					
					consumer.setTokenWithSecret(token, token_secret);
					
					CustomMultiPartEntity multi = new CustomMultiPartEntity(new ProgressListener() 
					{
						@Override
						public void transferred(long num) 
						{
							publishProgress((int) ((num / (float) totalSize) * 100));
						}
					});
					
					multi.addPart("title", new StringBody(title));
					multi.addPart("tags", new StringBody(tag_str));
					multi.addPart("photo", new FileBody(new File(filepath)));
					totalSize = multi.getContentLength();
					
					multi.consumeContent();
					
					//Log.d("flickr", multi.toString());
					
					httppost.setEntity(multi);
					
					ResponseHandler<String> res = new BasicResponseHandler();
					
					consumer.sign(httppost);
					
					String response = httpclient.execute(httppost, res);
					
					/*
					 * Add geolocation infor for photos
					 */
					if ((!latitude.equals("")) && (!longitude.equals("")))
					{
						try
						{
							DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
						
							Document doc = builder.parse(new InputSource(new ByteArrayInputStream(response.getBytes("utf-8"))));
							
							String photoid = "";
							
							if (doc != null)
							{
								NodeList nl = doc.getElementsByTagName("photoid");
								
								if (nl.getLength() > 0)
								{
									photoid = nl.item(0).getTextContent();
								}
							}
							
							url = "http://api.flickr.com/services/rest/?method=flickr.photos.geo.setLocation";
							
							uri = new URI(url);
							
							httpclient = new DefaultHttpClient();
							
							httppost = new HttpPost(uri);
							
							consumer = new CommonsHttpOAuthConsumer(FlickrServices.CONSUMER_KEY, FlickrServices.CONSUMER_SECRET);
							
							HttpParameters hp2 = new HttpParameters();
							hp2.put("photo_id", photoid);
							hp2.put("lat", latitude);
							hp2.put("lon", longitude);
							
							consumer.setAdditionalParameters(hp2);
							
							oms = new HmacSha1MessageSigner();
							
							consumer.setMessageSigner(oms);
							
							consumer.setTokenWithSecret(token, token_secret);
							
							MultipartEntity multi1 = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
							
							multi1.addPart("photo_id", new StringBody(photoid));
							multi1.addPart("lat", new StringBody(latitude));
							multi1.addPart("lon", new StringBody(longitude));
							
							multi1.consumeContent();
							
							//Log.d("flickr", multi.toString());
							
							httppost.setEntity(multi1);
							
							ResponseHandler<String> res2 = new BasicResponseHandler();
							
							consumer.sign(httppost);
							
							String _response = httpclient.execute(httppost, res2);
							
							Log.d("flickr", "Response from setLocation");
							Log.v("flickr", _response);
						}
						catch (Exception e) 
						{
							Log.e("flickr", "Error on Get PhotoID: " + e.toString());
							
							e.printStackTrace();
						}
					}
					
					result = true;
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					Log.e("flickr", "UploadPhoto: " + e.toString());
					
					result = false;
				}
			}
			else if (TumblrServices.title.toLowerCase().equals(_s))
			{
				TumblrItem acc = TumblrItem.getItem(ctx, account_id[pos]);
				String token = acc.getToken();
				String token_secret = acc.getTokenSecret();
				String base_hostname = acc.getUserID();
				
				try
				{
					String url = "http://api.tumblr.com/v2/blog/" + base_hostname + ".tumblr.com/post?type=photo&caption=" + URLEncoder.encode(title);
					
					String tag_str = "";
					
					if (!tags.equals(""))
					{
						String[] tags_arr = tags.split(default_tag_separate);
						
						tag_str = TextUtils.join(TumblrServices.tag_separate, tags_arr);
					}
					
					if (!tag_str.equals(""))
					{
						url += "&tags=" + URLEncoder.encode(tag_str);
					}
					
					Log.d("tumblr", "URL: " + url);
					
					URI uri = new URI(url);
					
					HttpClient httpclient = new DefaultHttpClient();
					
					HttpPost httppost = new HttpPost(uri);
					
					OAuthConsumer consumer = new CommonsHttpOAuthConsumer(TumblrServices.CONSUMER_KEY, TumblrServices.CONSUMER_SECRET);
					
					consumer.setTokenWithSecret(token, token_secret);
					
					CustomMultiPartEntity multi = new CustomMultiPartEntity(new ProgressListener() 
					{
						@Override
						public void transferred(long num) 
						{
							publishProgress((int) ((num / (float) totalSize) * 100));
						}
					});
					
					if (!tag_str.equals(""))
					{
						multi.addPart("tags", new StringBody(tag_str));
					}
					
					multi.addPart("type", new StringBody("photo"));
					multi.addPart("data", new FileBody(new File(filepath)));
					multi.addPart("caption", new StringBody(title));
					totalSize = multi.getContentLength();
					
					multi.consumeContent();
					
					httppost.setEntity(multi);
									
					ResponseHandler<String> res = new BasicResponseHandler();
					
					consumer.sign(httppost);
					
					String httpResponse = httpclient.execute(httppost, res);
					
					Log.i("tumblr", "Response from Upload: " + httpResponse);
					
					JSONObject json_meta = new JSONObject(httpResponse).getJSONObject("meta");
					
					if (json_meta.getInt("status") == 201)
					{
						result = true;
					}
					else
					{
						result = false;
					}
				}
				catch (Exception e) 
				{
					e.printStackTrace();
					
					return false;
				}
			}
			else if (PicasaServices.title.toLowerCase().equals(_s))
			{
				PicasaItem acc = PicasaItem.getItem(ctx, account_id[pos]);
				String TAG = "picasa";
				HttpClient client = null;
				HttpPost httppost = null;
				
				try 
			    {
		    		KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
			        trustStore.load(null, null);
			
			        SSLSocketFactory sf = new Commons.MySSLSocketFactory(trustStore);
			        sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			
			        HttpParams _params = new BasicHttpParams();
			        HttpProtocolParams.setVersion(_params, HttpVersion.HTTP_1_1);
			        HttpProtocolParams.setContentCharset(_params, HTTP.UTF_8);
			
			        SchemeRegistry registry = new SchemeRegistry();
			        registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
			        registry.register(new Scheme("https", sf, 443));
			
			        ClientConnectionManager ccm = new ThreadSafeClientConnManager(_params, registry);
			
			        client = new DefaultHttpClient(ccm, _params);
			        
			        trustStore = null; //Clean up memory
			        sf = null; //Clean up memory
			        _params = null; //Clean up memory
			        registry = null; //Clean up memory
			        ccm = null; //Clean up memory
			    } 
			    catch (Exception e) 
			    {
			    	client = new DefaultHttpClient();
			    }
				
				String user_infor = PicasaServices.GetUserInfo(acc.getAccessToken(), acc.getTokenType());
				
				if (user_infor.equals(""))
				{
					String a = PicasaServices.GetRefreshToken(acc.getAccessToken(), acc.getRefreshToken());
					
					Log.d("thong", "Response from GetRefreshToken: " + a);
					
					try
					{
						JSONObject json = new JSONObject(a);
						String new_access_token = json.getString("access_token");
						String new_token_type = json.getString("token_type");
						String new_id_token = json.getString("id_token");
						if (PicasaItem.updateRefreshToken(ctx, acc.getAccountID(), acc.getUserID(), acc.getUserName(), new_access_token, new_token_type, new_id_token, acc.getRefreshToken()))
						{
							acc = PicasaItem.getItem(ctx, account_id[pos]);
						}
						else
						{
							return false;
						}
					}
					catch (Exception e) 
					{
						return false;
					}
				}
				
				String url = "https://picasaweb.google.com/data/feed/api";
				
				url += "/user/" + acc.getUserID() + "/albumid/default";
				
				Log.i(TAG, "Upload Photo URL: " + url);
				
				try
				{
					URI uri = new URI(url);
					
					httppost = new HttpPost(uri);
					
					CustomFilePartEntity fe = new CustomFilePartEntity(
							new File(filepath), 
							"image/jpeg", 
							new CustomFilePartEntity.ProgressListener() 
							{
								@Override
								public void transferred(long num) 
								{
									publishProgress((int) ((num / (float) totalSize) * 100));
								}
							});
					
					fe.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, "image/jpeg"));
					
					totalSize = fe.getContentLength();
					
					httppost.setEntity(fe);
					
					httppost.addHeader("Authorization", "Bearer " + acc.getAccessToken());
					
					httppost.addHeader("GData-Version", "2");
									
					ResponseHandler<String> res = new BasicResponseHandler();
					
					String httpResponseUpload = client.execute(httppost, res);
					
					Log.i(TAG, "Response from Upload: " + httpResponseUpload);
					
					if (!tags.equals(""))
					{
						String[] tags_arr = tags.split(default_tag_separate);
						
						
						
						InputStream inputStream = new ByteArrayInputStream(httpResponseUpload.getBytes());
			        	
			        	SAXBuilder builder = new SAXBuilder();
			        	org.jdom.Document doc = builder.build(inputStream);
			        	
			        	Iterator<?> i = doc.getRootElement().getChildren().iterator();
			        	
			        	String photo_id = "";
			        	
			        	String album_id = "";
			        	
			        	while (i.hasNext())
			        	{
			        		Element e = (Element) i.next();
			        		
			        		if ((e.getContentSize() == 1) && (e.getQualifiedName().equals("gphoto:id")))
			        		{
			        			Log.d("thong", "ID link: " + e.getText());
			        			photo_id = e.getText(); 
			        		}
			        		else if ((e.getContentSize() == 1) && (e.getQualifiedName().equals("gphoto:albumid")))
			        		{
			        			album_id = e.getText();
			        		}
			        	}
			        	
			        	for (int _i = 0; _i < tags_arr.length; _i++)
			        	{
			        		String tag_str = "<entry xmlns='http://www.w3.org/2005/Atom'>";
			        		tag_str += "<title>" + tags_arr[_i] + "</title><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/photos/2007#tag' />";
			        		tag_str += "</entry>";
			        		Log.d(TAG, tag_str);
			        		
			        		String t_url = "https://picasaweb.google.com/data/feed/api/user/" + acc.getUserID() + "/albumid/" + album_id + "/photoid/" + photo_id;
				        	//String t_url = "https://picasaweb.google.com/data/entry/api/user/" + acc.getUserID() + "/albumid/" + album_id + "/photoid/" + photo_id;
				        	
				        	Log.d(TAG, "TAG url: " + t_url);
				        	
				        	URI t_uri = new URI(t_url);
							
							//HttpPut httpput = new HttpPut(t_uri);
							httppost = new HttpPost(t_uri);
							
							StringEntity se = new StringEntity(tag_str);
							
							se.setContentType("application/atom+xml");
							
							//Log.d(TAG, "Access Token: " + acc.getAccessToken());
							
							httppost.setEntity(se);
							
							httppost.addHeader("Authorization", "Bearer " + acc.getAccessToken());
							
							httppost.addHeader("GData-Version", "2");
											
							ResponseHandler<String> t_res = new BasicResponseHandler();
							
							String t_httpResponseUpload = client.execute(httppost, t_res);
							
							Log.d(TAG, "Response from add tags: ");
							Log.v(TAG, t_httpResponseUpload);
			        	}
					}
					
					result = true;
				}
				catch (Exception e) 
				{
					Log.e(TAG, e.toString());
					
					e.printStackTrace();
					
					return false;
				}
			}
			
			return result;
		}
		
		@Override
		protected void onProgressUpdate(Integer... progress)
		{
			int _p = (int) progress[0];
			tvPC.setText(_p + "...%");
			pb.setProgress(_p);
		}
 
		@Override
		protected void onPostExecute(Boolean b)
		{
			tvPC.setVisibility(View.GONE);
			
			if (b)
			{
				ivOK.setVisibility(View.VISIBLE);
				ivFail.setVisibility(View.GONE);
			}
			else
			{
				ivOK.setVisibility(View.GONE);
				ivFail.setVisibility(View.VISIBLE);
			}
		}
	}
}
